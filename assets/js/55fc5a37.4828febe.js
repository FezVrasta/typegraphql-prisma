"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[444],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6976:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Changing exposed model type field name",sidebar_label:"Renaming field",sidebar_position:7},p=void 0,s={unversionedId:"advanced/renaming-field",id:"advanced/renaming-field",title:"Changing exposed model type field name",description:"You can also change the name of the model type fields exposed in GraphQL Schema.",source:"@site/../docs/advanced/renaming-field.md",sourceDirName:"advanced",slug:"/advanced/renaming-field",permalink:"/docs/advanced/renaming-field",editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/renaming-field.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Changing exposed model type field name",sidebar_label:"Renaming field",sidebar_position:7},sidebar:"docs",previous:{title:"Renaming model",permalink:"/docs/advanced/renaming-model"},next:{title:"Unchecked scalars input",permalink:"/docs/advanced/unchecked-scalars"}},d=[],c={toc:d};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can also change the name of the model type fields exposed in GraphQL Schema.\nTo achieve this, just put the ",(0,i.kt)("inlineCode",{parentName:"p"},"@TypeGraphQL.field")," doc line above the model field definition in ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file, e.g:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{3}","{3}":!0},'model User {\n  id     Int     @default(autoincrement()) @id\n  /// @TypeGraphQL.field(name: "emailAddress")\n  email  String  @unique\n  posts  Post[]\n}\n')),(0,i.kt)("p",null,"This will result in the following GraphQL schema representation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{3}","{3}":!0},"type User {\n  id: Int!\n  emailAddress: String!\n  posts: [Post!]!\n}\n")),(0,i.kt)("p",null,"All generated CRUD and relations resolvers fully support this feature and they map under the hood the original prisma property to the renamed field exposed in schema."),(0,i.kt)("p",null,"The same goes to the resolvers input types - they will also be emitted with changed field name, e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"{2}","{2}":!0},"input UserCreateInput {\n  emailAddress: String!\n  posts: PostCreateManyWithoutAuthorInput\n}\n")),(0,i.kt)("p",null,"The emitted input type classes automatically map the provided renamed field values from GraphQL query into proper Prisma input properties out of the box."))}u.isMDXComponent=!0}}]);