"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[913],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,m=f["".concat(s,".").concat(d)]||f[d]||c[d]||o;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(7462),a=t(7294),o=t(6010),l=t(2389),i=t(7392),s=t(7094),u=t(2466);const p="tabList__CuJ",c="tabItem_LNqP";function f(e){var n;const{lazy:t,block:l,defaultValue:f,values:d,groupId:m,className:h}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=d??y.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),g=(0,i.l)(v,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===f?f:f??(null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)??y[0].props.value;if(null!==b&&!v.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:T,setTabGroupChoices:x}=(0,s.U)(),[k,C]=(0,a.useState)(b),S=[],{blockElementScrollPositionUntilNextRender:w}=(0,u.o5)();if(null!=m){const e=T[m];null!=e&&e!==k&&v.some((n=>n.value===e))&&C(e)}const O=e=>{const n=e.currentTarget,t=S.indexOf(n),r=v[t].value;r!==k&&(w(n),C(r),null!=m&&x(m,String(r)))},_=e=>{var n;let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;t=S[n]??S[0];break}case"ArrowLeft":{const n=S.indexOf(e.currentTarget)-1;t=S[n]??S[S.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},h)},v.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>S.push(e),onKeyDown:_,onClick:O},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":k===n})}),t??n)}))),t?(0,a.cloneElement)(y.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function d(e){const n=(0,l.Z)();return a.createElement(f,(0,r.Z)({key:String(n)},e))}},5711:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var r=t(7462),a=(t(7294),t(3905)),o=t(5488),l=t(5162);const i={title:"Overriding plural form of model name",sidebar_label:"Custom plural form",sidebar_position:15},s=void 0,u={unversionedId:"advanced/override-plural",id:"advanced/override-plural",title:"Overriding plural form of model name",description:'In some cases, the noun used as the model name might not have a proper plural form. For example, the word "fish" is not pluralized to "fishes". In such cases, you can override the plural form by adding a plural argument to the @@TypeGraphQL.type comment attribute, e.g.:',source:"@site/../docs/advanced/override-plural.mdx",sourceDirName:"advanced",slug:"/advanced/override-plural",permalink:"/docs/advanced/override-plural",draft:!1,editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/override-plural.mdx",tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"Overriding plural form of model name",sidebar_label:"Custom plural form",sidebar_position:15},sidebar:"docs",previous:{title:"Emit ID type",permalink:"/docs/advanced/emit-id-type"},next:{title:"Prisma import path",permalink:"/docs/advanced/custom-prisma-import"}},p={},c=[],f={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'In some cases, the noun used as the model name might not have a proper plural form. For example, the word "fish" is not pluralized to "fishes". In such cases, you can override the plural form by adding a ',(0,a.kt)("inlineCode",{parentName:"p"},"plural")," argument to the ",(0,a.kt)("inlineCode",{parentName:"p"},"@@TypeGraphQL.type")," comment attribute, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma"},'// highlight-next-line\n/// @@TypeGraphQL.type(plural: "StaffMembers")\nmodel Staff {\n  id   Int    @id @default(autoincrement())\n  name String @unique\n}\n')),(0,a.kt)("p",null,"This way, the generated resolvers for ",(0,a.kt)("inlineCode",{parentName:"p"},"Staff")," model will use the plural form of ",(0,a.kt)("inlineCode",{parentName:"p"},"StaffMembers"),", so that it won't generate anymore actions named ",(0,a.kt)("inlineCode",{parentName:"p"},"findManyStaff")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"findUniqueStaff")," as it would do by default, e.g.:"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"plural",label:"Overridden plural",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@TypeGraphQL.Resolver(_of => Staff)\nexport class StaffCrudResolver {\n  @TypeGraphQL.Query(_returns => [Staff], {\n    nullable: false,\n  })\n  // highlight-next-line\n  async staffMembers(\n    @TypeGraphQL.Ctx() ctx: any,\n    @TypeGraphQL.Info() info: GraphQLResolveInfo,\n    @TypeGraphQL.Args() args: FindManyStaffArgs,\n  ): Promise<Staff[]> {\n    const { _count } = transformFields(graphqlFields(info as any));\n    return getPrismaFromContext(ctx).staff.findMany({\n      ...args,\n      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),\n    });\n  }\n\n  @TypeGraphQL.Query(_returns => Staff, {\n    nullable: true,\n  })\n  // highlight-next-line\n  async staff(\n    @TypeGraphQL.Ctx() ctx: any,\n    @TypeGraphQL.Info() info: GraphQLResolveInfo,\n    @TypeGraphQL.Args() args: FindUniqueStaffArgs,\n  ): Promise<Staff | null> {\n    const { _count } = transformFields(graphqlFields(info as any));\n    return getPrismaFromContext(ctx).staff.findUnique({\n      ...args,\n      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),\n    });\n  }\n}\n"))),(0,a.kt)(l.Z,{value:"default",label:"Default",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@TypeGraphQL.Resolver(_of => Staff)\nexport class StaffCrudResolver {\n  @TypeGraphQL.Query(_returns => [Staff], {\n    nullable: false,\n  })\n  // highlight-next-line\n  async findManyStaff(\n    @TypeGraphQL.Ctx() ctx: any,\n    @TypeGraphQL.Info() info: GraphQLResolveInfo,\n    @TypeGraphQL.Args() args: FindManyStaffArgs,\n  ): Promise<Staff[]> {\n    const { _count } = transformFields(graphqlFields(info as any));\n    return getPrismaFromContext(ctx).staff.findMany({\n      ...args,\n      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),\n    });\n  }\n\n  @TypeGraphQL.Query(_returns => Staff, {\n    nullable: true,\n  })\n  // highlight-next-line\n  async findUniqueStaff(\n    @TypeGraphQL.Ctx() ctx: any,\n    @TypeGraphQL.Info() info: GraphQLResolveInfo,\n    @TypeGraphQL.Args() args: FindUniqueStaffArgs,\n  ): Promise<Staff | null> {\n    const { _count } = transformFields(graphqlFields(info as any));\n    return getPrismaFromContext(ctx).staff.findUnique({\n      ...args,\n      ...(_count && transformCountFieldIntoSelectRelationsCount(_count)),\n    });\n  }\n}\n")))))}d.isMDXComponent=!0}}]);