"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[63],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6617:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={title:"Exposing selected models Prisma CRUD actions",sidebar_label:"Exposing selected models",sidebar_position:1},l=void 0,c={unversionedId:"advanced/exposing-models",id:"advanced/exposing-models",title:"Exposing selected models Prisma CRUD actions",description:"If you want to expose only CRUD Prisma actions for selected models, you can import crud resolver classes only for that models, instead of the all-in-one resolvers object.",source:"@site/../docs/advanced/exposing-models.md",sourceDirName:"advanced",slug:"/advanced/exposing-models",permalink:"/docs/advanced/exposing-models",editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/exposing-models.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Exposing selected models Prisma CRUD actions",sidebar_label:"Exposing selected models",sidebar_position:1},sidebar:"docs",previous:{title:"Nest JS",permalink:"/docs/basics/nest-js"},next:{title:"Exposing selected actions",permalink:"/docs/advanced/exposing-actions"}},p=[],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"If you want to expose only CRUD Prisma actions for selected models, you can import crud resolver classes only for that models, instead of the all-in-one ",(0,s.kt)("inlineCode",{parentName:"p"},"resolvers")," object."),(0,s.kt)("p",null,"Then you just have to put them into the ",(0,s.kt)("inlineCode",{parentName:"p"},"buildSchema"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{1,4}","{1,4}":!0},'import { UserCrudResolver, PostCrudResolver } from "@generated/type-graphql";\n\nconst schema = await buildSchema({\n  resolvers: [CustomUserResolver, UserCrudResolver, PostCrudResolver],\n  validate: false,\n});\n')),(0,s.kt)("p",null,"However, if you also want to have relations like ",(0,s.kt)("inlineCode",{parentName:"p"},"User -> posts")," emitted in schema, you need to import also the relations resolvers and register them in your ",(0,s.kt)("inlineCode",{parentName:"p"},"buildSchema")," call:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{3,8}","{3,8}":!0},'import {\n  User,\n  UserRelationsResolver,\n  UserCrudResolver,\n} from "@generated/type-graphql";\n\nconst schema = await buildSchema({\n  resolvers: [CustomUserResolver, UserRelationsResolver, UserCrudResolver],\n  validate: false,\n});\n')))}u.isMDXComponent=!0}}]);